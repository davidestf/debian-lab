

global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDS>
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http
        
        
        



frontend MAIN
#        bind *:21
         bind *:80
         bind *:443
         mode http

acl ES1_URL hdr(host) -i protolab.me
acl ES2_URL hdr(host) -i mail.protolab.me
acl MC_URL hdr(host) -i plex.protolab.me

use_backend ES1  if ES1_URL
use_backend ES2  if ES2_URL
use_backend MC   if MC_URL

backend ES1
        mode http
        server web-esf 10.0.0.10

backend ES2
        mode http
        server web-est 10.0.0.12

backend MC
        mode http
        server web-mc 10.0.0.13

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
# Single VIP
frontend ft_ssl_vip
  bind 192.168.88.2:80
#  bind 0.0.0.0:25
  bind 192.168.88.2:443
  bind 192.168.88.2:32400
  mode tcp

  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }

  default_backend bk_ssl_default

# Using SNI to make routing decision
backend bk_ssl_default
  mode tcp

  acl app01 req_ssl_sni -i protolab.me
  acl app02 req_ssl_sni -i mail.protolab.me
  acl app03 req_ssl_sni -i plex.protolab.me

  use-server app01 if app01
  use-server app02 if app02
  use-server app03 if app03

  option ssl-hello-chk
  server app01 10.0.0.10:443 check
  server app02 10.0.0.12:443 check
  server app03 10.0.0.13:32400 check








